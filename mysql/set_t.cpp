//=============================================================================
//	File name: set_t.cpp
//	Description:
//	Tab-Width: 4
//  Author: rockmetoo
//-----------------------------------------------------------------------------

#include "set_t.h"

#ifdef MYSQLW_NAMESPACE
namespace MYSQLW_NAMESPACE{
#endif
//=============================================================================
//-----------------------------------------------------------------------------
set_t::set_t(std::map<std::string, uint64_t>& ref) : m_mmap(ref), m_value(0)
{
}
//=============================================================================
//-----------------------------------------------------------------------------
void set_t::operator=(const std::string& str)
{
	size_t x = 0;
	size_t i;
	m_value = 0;
	size_t stSize = str.size();
	for(i = 0; i < stSize; i++){
		if(str[i] == ','){
			m_value |= m_mmap[str.substr(x,i - x)];
			x = i + 1;
		}
	}
	m_value |= m_mmap[str.substr(x,i - x)];
}
//=============================================================================
//-----------------------------------------------------------------------------
void set_t::operator=(uint64_t s)
{
	m_value = s;
}
//=============================================================================
//-----------------------------------------------------------------------------
void set_t::operator|=(uint64_t s)
{
	m_value |= s;
}
//=============================================================================
//-----------------------------------------------------------------------------
void set_t::operator&=(uint64_t s)
{
	m_value &= s;
}
//=============================================================================
//-----------------------------------------------------------------------------
const std::string& set_t::String()
{
	std::string str;
	for(std::map<std::string, uint64_t>::iterator it = m_mmap.begin(); it != m_mmap.end(); it++){
		std::string tmp = (*it).first;
		uint64_t bit = (*it).second;
		if(m_value & bit){
			if(str.size())
				str += ",";
			str += tmp;
		}
	}
	m_strvalue = str;
	return m_strvalue;
}
//=============================================================================
//-----------------------------------------------------------------------------
uint64_t set_t::Value()
{
	return m_value;
}
//=============================================================================
//-----------------------------------------------------------------------------
bool set_t::in_set(const std::string& str)
{
	if (m_value & m_mmap[str])
		return true;
	return false;
}
//=============================================================================
//-----------------------------------------------------------------------------
const char* set_t::c_str()
{
	return String().c_str();
}
//=============================================================================
//-----------------------------------------------------------------------------
void set_t::operator+=(const std::string& str)
{
	size_t x = 0;
	size_t i;
	size_t stSize = str.size();
	for(i = 0; i < stSize; i++){
		if(str[i] == ','){
			m_value |= m_mmap[str.substr(x,i - x)];
			x = i + 1;
		}
	}
	m_value |= m_mmap[str.substr(x,i - x)];
}
//=============================================================================
//-----------------------------------------------------------------------------
void set_t::operator-=(const std::string& str)
{
	size_t x = 0;
	size_t i;
	size_t stSize = str.size();
	for(i = 0; i < stSize; i++){
		if(str[i] == ','){
			m_value &= ~m_mmap[str.substr(x,i - x)];
			x = i + 1;
		}
	}
	m_value &= ~m_mmap[str.substr(x,i - x)];
}


#ifdef MYSQLW_NAMESPACE
}
#endif
